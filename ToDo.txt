Bekannte Bugs:
    GTK-UI:
        Default-Höhe wird ignoriert
Dokumentation schreiben
    ReadMe
        Markup überprüfen
        Beispiel-Schaltpläne
            ReadMe texen?
    Copyright/Lizenz
Unfinished Features:
    Smart-Constructor für Wegstrecken um (wenn nötig) einen eindeutigen Zugtyp sicherzustellen
        wegstrecke :: Text -> [Bahngeschwindigkeit] -> [Streckenabschnitt] -> [(Weiche, Richtung)] -> [Kupplung] -> Maybe Wegstrecke
        stelle smart-Destructor zum Pattern Matching bereit
            Selector-Funktionen exportieren?
            Identischer View-Datentyp mit exportiertem Konstruktor?
        Alternativ Umdrehen bei unklarem Zugtyp der verwendeten Bahngeschwindigkeiten verbieten?
        Mischformen können aktuell zu potentiell unerwartetem Verhalten führen
    Test-Suite vervollständigen
    Cmd-UI:
        Mehr Farbe verwenden?
    Zeige in der Hilfe die Optionen der Flags an (optparse-applicative)
        Speichere Hilfe-Texte ebenfalls in Language.hs
        helper durch eigenen Hilfstext ersetzten
    Plan:
        abbrechbar machen?
        Nur einen Plan gleichzeitig ausführen erlauben?
Code verbessern:
    Entfernen von zusätzlich erstellten Widgets in entsprechender Typklasse (als Fkt von Dynamische Widgets)
        vermeidet Duplikation (und damit Fehlerquelle) beim Laden
    FortfahrenWennToggled mit MVar ersetzten durch abstrakten Datentyp, welcher registrieren beim erstellen ausführt (... -> IO RegistrierterCheckbutton)?
        LinkedMVar benötigt dadurch Update-Aktion nicht mehr
        Konstruktor muss LinkedMVar kennen
    englische Namen beseitigen:
        PlanGeneral -> PlanAllgemein|Done
        AktionGeneral -> AktionAllgemein|Done
        StatusGeneral -> StatusAllgemein|Done
            Status -> Zustand?
        Weitere?
gi-gtk/gi-gtk-declarative verwenden?
    Fehlermeldungen auf Raspberry Pi!!!!!!
-------------------------------
VS-Code Extensions:
    German Language Pack
    GitLens
    Haskell Language Server
        haskell-ide-engine (benötigt ältere Version für Windows)
    Haskell Syntax Highlighting
    Unicode Latex
-------------------------------
VS-Code globale Settings.json:
{
    "editor.autoClosingBrackets": "never",
    "editor.autoClosingQuotes": "never",
    "editor.autoSurround": "never",
    "editor.minimap.enabled": false,
    "editor.renderWhitespace": "all",
    "workbench.colorTheme": "Quiet Light",
    "files.exclude": {
        "**/.stack-work": true,
        "**/.vscode": true,
    },
    "editor.tokenColorCustomizations": {
        "comments": "#FF0000"
    },
    "workbench.colorCustomizations": {
        "editorWhitespace.foreground": "#cccccc"
    },
    "files.eol": "\n",
    "hoogle-vscode.useCabalDependencies": true
}
---------------------------------
VS-Code globale keybindings.json:
// Platzieren Sie Ihre Tastenzuordnungen in dieser Datei, um die Standardwerte zu überschreiben.auto[]
[
    {
        "key": "shift+tab",
        "command": "acceptSelectedSuggestion",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "tab",
        "command": "-acceptSelectedSuggestion",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "alt+pagedown",
        "command": "workbench.action.splitEditorDown"
    },
    {
        "key": "ctrl+shift+h",
        "command": "workbench.action.tasks.runTask",
        "args": "haddock"
    },
    {
        "key": "ctrl+shift+t",
        "command": "workbench.action.tasks.runTask",
        "args": "test"
    },
    {
        "key": "ctrl+shift+e",
        "command": "workbench.action.tasks.runTask",
        "args": "exec"
    },
    {
        "key": "ctrl+shift+a",
        "command": "workbench.action.tasks.runTask",
        "args": ""
    }
]